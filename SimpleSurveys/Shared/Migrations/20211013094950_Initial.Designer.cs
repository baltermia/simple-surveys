// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSurveys.Shared.Models;

namespace SimpleSurveys.Shared.Migrations
{
    [DbContext(typeof(SimpleSurveysContext))]
    [Migration("20211013094950_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CheckResultValue", b =>
                {
                    b.Property<int>("CheckResultsID")
                        .HasColumnType("int");

                    b.Property<int>("ValuesID")
                        .HasColumnType("int");

                    b.HasKey("CheckResultsID", "ValuesID");

                    b.HasIndex("ValuesID");

                    b.ToTable("CheckResultValue");
                });

            modelBuilder.Entity("CheckValue", b =>
                {
                    b.Property<int>("ChecksID")
                        .HasColumnType("int");

                    b.Property<int>("ValuesID")
                        .HasColumnType("int");

                    b.HasKey("ChecksID", "ValuesID");

                    b.HasIndex("ValuesID");

                    b.ToTable("CheckValue");
                });

            modelBuilder.Entity("DropDownResultValue", b =>
                {
                    b.Property<int>("DropDownResultsID")
                        .HasColumnType("int");

                    b.Property<int>("ValuesID")
                        .HasColumnType("int");

                    b.HasKey("DropDownResultsID", "ValuesID");

                    b.HasIndex("ValuesID");

                    b.ToTable("DropDownResultValue");
                });

            modelBuilder.Entity("DropDownValue", b =>
                {
                    b.Property<int>("DropDownsID")
                        .HasColumnType("int");

                    b.Property<int>("ValuesID")
                        .HasColumnType("int");

                    b.HasKey("DropDownsID", "ValuesID");

                    b.HasIndex("ValuesID");

                    b.ToTable("DropDownValue");
                });

            modelBuilder.Entity("RadioValue", b =>
                {
                    b.Property<int>("RadiosID")
                        .HasColumnType("int");

                    b.Property<int>("ValuesID")
                        .HasColumnType("int");

                    b.HasKey("RadiosID", "ValuesID");

                    b.HasIndex("ValuesID");

                    b.ToTable("RadioValue");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Step", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("SurveyID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SurveyID");

                    b.ToTable("Steps");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Step");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.StepResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StepID")
                        .HasColumnType("int");

                    b.Property<int>("SurveyResultID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StepID");

                    b.HasIndex("SurveyResultID");

                    b.ToTable("StepResults");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StepResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Survey", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosedSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxSubmissions")
                        .HasColumnType("int");

                    b.Property<bool>("Open")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.SurveyResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Submitted")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SurveyID");

                    b.ToTable("SurveyResults");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Value", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Check", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.HasDiscriminator().HasValue("Check");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Date", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.Property<DateTime?>("Default")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_Default");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Placeholder");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Date");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.DropDown", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.Property<int?>("Default")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Default");

                    b.Property<bool>("MultiSelect")
                        .HasColumnType("bit");

                    b.Property<string>("Placeholder")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Placeholder");

                    b.HasDiscriminator().HasValue("DropDown");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Number", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.Property<int?>("Default")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Default");

                    b.Property<string>("Placeholder")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Placeholder");

                    b.HasDiscriminator().HasValue("Number");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Radio", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.HasDiscriminator().HasValue("Radio");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Range", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Range");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Text", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Placeholder");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.YesNo", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.Step");

                    b.HasDiscriminator().HasValue("YesNo");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.CheckResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.HasDiscriminator().HasValue("CheckResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.DateResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.Property<DateTime>("Value")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateTime_Value");

                    b.HasDiscriminator().HasValue("DateResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.DropDownResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.HasDiscriminator().HasValue("DropDownResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.NumberResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.Property<int>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Int_Value");

                    b.HasDiscriminator().HasValue("NumberResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.RadioResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.Property<string>("Value")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("String_Value");

                    b.HasDiscriminator().HasValue("RadioResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.RangeResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.Property<int>("Value")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Int_Value");

                    b.HasDiscriminator().HasValue("RangeResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.RateResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.Property<string>("Value")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("String_Value");

                    b.HasDiscriminator().HasValue("RateResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.TextResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("String_Value");

                    b.HasDiscriminator().HasValue("TextResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.YesNoResult", b =>
                {
                    b.HasBaseType("SimpleSurveys.Shared.Models.StepResult");

                    b.Property<bool>("Value")
                        .HasColumnType("bit")
                        .HasColumnName("Bool_Value");

                    b.HasDiscriminator().HasValue("YesNoResult");
                });

            modelBuilder.Entity("CheckResultValue", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.CheckResult", null)
                        .WithMany()
                        .HasForeignKey("CheckResultsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleSurveys.Shared.Models.Value", null)
                        .WithMany()
                        .HasForeignKey("ValuesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CheckValue", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.Check", null)
                        .WithMany()
                        .HasForeignKey("ChecksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleSurveys.Shared.Models.Value", null)
                        .WithMany()
                        .HasForeignKey("ValuesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DropDownResultValue", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.DropDownResult", null)
                        .WithMany()
                        .HasForeignKey("DropDownResultsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleSurveys.Shared.Models.Value", null)
                        .WithMany()
                        .HasForeignKey("ValuesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DropDownValue", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.DropDown", null)
                        .WithMany()
                        .HasForeignKey("DropDownsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleSurveys.Shared.Models.Value", null)
                        .WithMany()
                        .HasForeignKey("ValuesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RadioValue", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.Radio", null)
                        .WithMany()
                        .HasForeignKey("RadiosID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleSurveys.Shared.Models.Value", null)
                        .WithMany()
                        .HasForeignKey("ValuesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Step", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.Survey", "Survey")
                        .WithMany("Steps")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.StepResult", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.Step", "Step")
                        .WithMany("Results")
                        .HasForeignKey("StepID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleSurveys.Shared.Models.SurveyResult", "SurveyResult")
                        .WithMany("StepResults")
                        .HasForeignKey("SurveyResultID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Step");

                    b.Navigation("SurveyResult");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.SurveyResult", b =>
                {
                    b.HasOne("SimpleSurveys.Shared.Models.Survey", "Survey")
                        .WithMany("SurveyResults")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Step", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.Survey", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("SurveyResults");
                });

            modelBuilder.Entity("SimpleSurveys.Shared.Models.SurveyResult", b =>
                {
                    b.Navigation("StepResults");
                });
#pragma warning restore 612, 618
        }
    }
}
