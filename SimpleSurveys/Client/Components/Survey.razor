<style>
    .survey-title-box p {
        display: inline;
    }

    .survey-title-box-update p {
        display: inline;
    }

    .survey-title-box {
        margin-bottom: 20px;
    }

    .survey-title {
        color: rgba(0,0,0,.85);
        font-weight: 600;
        font-size: 38px;
    }

    .survey-title-edit {
        width: 100%;
        border: none;
        color: #6b6b6b;
    }

    .survey-subtitle {
        font-size: 16px;
        color: #606060;
    }

    .survey-updated {
        margin-left: 10px;
    }

    .public-box {
        margin-bottom: 15px;
    }

    .description {
        font-size: 16px;
        color: #606060;
    }

    .item {
        margin-bottom: 10px;
    }

    .submissions-input {
        max-width: 10%;
        min-width: 100px;
    }

    .submissions-input {
        max-width: 20%;
        min-width: 200px;
    }

    .survey-content {
        width: 60%;
    }

    .add-step {
        margin-bottom: 20px;
        margin-top: 20px;
    }
</style>

@if (Mode == Enums.Mode.View)
{
    <div class="survey-title-box">
        <p class="survey-title">@SurveyItem.Title</p>
        <p class="survey-subtitle survey-updated">Created <strong>@SurveyItem.Created.ToString("dd.MM.yyyy HH:mm")</strong></p>
        @if (SurveyItem.Updated != null)
        {
            <p class="survey-subtitle"> · Updated <strong>@SurveyItem.Updated?.ToString("dd.MM.yyyy HH:mm")</strong></p>
        }
    </div>

    <p class="description">@SurveyItem.Description</p>

    @foreach (var step in SurveyItem.Steps.OrderBy(s => s.Position))
    {
        <SimpleSurveys.Client.Components.Step StepItem="@step" Mode="@Mode" />
    }
}
else
{
    <Form Model="@SurveyItem">

        <div class="survey-title-box">
            <FormItem Required>
                <input class="survey-title survey-title-edit" placeholder="Title" @bind-value="context.Title" />
            </FormItem>
        </div>

        <div class="survey-content">
            @if (Mode == Enums.Mode.Edit)
            {
                <div class="item survey-title-box-update">
                    <p class="survey-subtitle">Created <strong>@context.Created.ToString("dd.MM.yyyy HH:mm")</strong></p>
                    @if (context.Updated != null)
                    {
                        <p class="survey-subtitle"> · Updated <strong>@context.Updated?.ToString("dd.MM.yyyy HH:mm")</strong></p>
                    }
                </div>
            }

            <div class="item">
                <FormItem>
                    <TextArea Placeholder="Description" MinRows="3" MaxRows="6" @bind-Value="@context.Description" />
                </FormItem>
            </div>

            <div class="item">
                <FormItem Label="Password">
                    <div class="password-input">
                        <InputPassword @bind-Value="context.Password" DefaultValue="@null" OnChange="@(() => { if (context.Password == null) context.Public = true; })" />
                    </div>
                </FormItem>
            </div>

            <div class="item">
                <FormItem>
                    <Popover Content="Password is required to manage result visibility.">
                        <Checkbox Disabled="@(context.Password == null)" Checked="@(context.Password != null && context.Public)" Class="public-box" @bind-Value="context.Public">Public Results</Checkbox>
                    </Popover>
                </FormItem>
            </div>

            <div class="item">
                <FormItem Label="Max Submissions">
                    <div class="submissions-input">
                        <AntDesign.InputNumber @bind-Value="submissionsValue" DefaultValue="@null" TValue="ushort?" />
                    </div>
                </FormItem>
            </div>
        </div>

        <div>
            @foreach (var step in SurveyItem.Steps.OrderBy(s => s.Position))
            {
                <SimpleSurveys.Client.Components.Step StepItem="@step" Mode="@Mode" OnUp="OnStepUp" OnDown="OnStepDown" OnClose="OnStepClose" />
            }
        </div>

        <div class="item add-step">
            <Button Block Type="@ButtonType.Dashed" Size="@ButtonSize.Large">
                <Dropdown BoundaryAdjustMode="@TriggerBoundaryAdjustMode.InView">
                    <Overlay>
                        <Menu>
                            <MenuItem Icon="@IconType.Outline.FileText" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.Text>())">Text</MenuItem>
                            <MenuItem Icon="@IconType.Outline.Number" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.Number>())">Number</MenuItem>
                            <MenuItem Icon="@IconType.Outline.CheckSquare" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.Check>())">Check</MenuItem>
                            <MenuItem Icon="@IconType.Outline.CheckCircle" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.Radio>())">Radio</MenuItem>
                            <MenuItem Icon="@IconType.Outline.ColumnWidth" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.Range>())">Range</MenuItem>
                            <MenuItem Icon="@IconType.Outline.Star" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.Rate>())">Rate</MenuItem>
                            <MenuItem Icon="@IconType.Outline.Calendar" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.Date>())">Date</MenuItem>
                            <MenuItem Icon="@IconType.Outline.UnorderedList" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.DropDown>())">DropDown</MenuItem>
                            <MenuItem Icon="@IconType.Outline.Control" @onclick="@(() => AddStep<SimpleSurveys.Shared.Models.YesNo>())">Yes/No</MenuItem>
                        </Menu>
                    </Overlay>
                    <ChildContent>
                        <a class="ant-dropdown-link" @onclick:preventDefault>
                            Add new Step <Icon Type="down" />
                        </a>
                    </ChildContent>
                </Dropdown>
            </Button>
        </div>

        <div class="item">
            <FormItem>
                <Button Size="@ButtonSize.Large" Block Type="@ButtonType.Primary" HtmlType="submit" OnClick="OnSubmitClickAsync">
                    Submit
                </Button>
            </FormItem>
        </div>
    </Form>
}
